#
#   FILE: BUILD.PS1 
#   TYPE: PWSH_SCRIPT
#
#   This file is used by a bot (KIEDTL-MACHINE) to 
#   automatically update Open-Scoop application manifests
#   and add appropriate tags.
#
#   BUCKET MAINTAINERS: This script assumes that 
#   Open-Scoop is location in SCOOPDIR/proj/open-scoop. It 
#   also assumes that Scoop is installed in 
#   $env:USERPROFILE\scoop.
#   
#   Please do not edit this file. Any pull requests
#   with this file edited WILL NOT be accepted.
#       _            _
#    __| |_ __ _ _ _| |_
#   (_-<  _/ _` | '_|  _|
#   /__/\__\__,_|_|  \__|
# 

param (
	[switch]$NoTag = $false
)

$USER = $env:USERNAME
$OPENSCOOPDIR = "C:\Users\$USER\scoop\proj\open-scoop"
$SCOOP = scoop which scoop
if ( !$env:SCOOP_HOME ) { 
  $env:SCOOP_HOME = resolve-path (split-path (split-path (scoop which scoop))) 
}
$checkver = "C:\\Users\\$USER\\scoop\\apps\\scoop\\current\\bin\\checkver.ps1"
$dir = "C:\\Users\\$USER\\scoop\\proj\\open-scoop" 
$DATETIME = Get-Date

. "$OPENSCOOPDIR/bin/json.ps1"

Set-Location $HOME
Set-Location scoop/proj/open-scoop/bin

git pull > log.txt

$files = Get-ChildItem ../.\*.json
$i = 1;
Get-ChildItem ../.\*.json | Foreach-Object {
  $basename = $_.BaseName
  $name = $_.Name
  Write-Progress -Activity "Updating application manifests" -status "Scanning $name" -percentComplete ($i / $files.count * 100)
  $out = ../../../apps/scoop/current/bin/checkver.ps1 -dir $dir -App $basename -u | Out-String
  git commit -q -a -m "Auto-updated $basename" > log.txt
  $i++
}

Add-Content -Path "../README.md" -Value "### List of apps`n---`n**Note**: This section is automatically generated by the bin/build.ps1 script.`r`n`r`n" -NoNewline

Add-Content -Path "../README.md" -Value "| Name | Version | Homepage |`r`n" -NoNewline
Add-Content -Path "../README.md" -Value "| ---- | ------- | -------- |`r`n" -NoNewline

Get-ChildItem ../.\*.json | Foreach-Object {
	$appname = $_.BaseName
	$appdata = Get-Content $_ | ConvertFrom-JSON
	$homepage = $appdata.homepage
	$version = $appdata.version
	Add-Content -Path "../README.md" -Value "| $appname | $version | [$homepage]($homepage) |`r`n" -NoNewline
}

Add-Content -Path "../README.md" -Value "`nThis section was last generated on $DATETIME"

git add ../APPLIST.md
git commit -q -m "Automatically updated APPLIST.md"

Write-Output "Finished updating app manifests"

# Format each file
$c = 1
$manifests = Get-ChildItem ../.\*.json
Get-ChildItem ../.\*.json | ForEach-Object {
   $name = $_.Name 
    $json = parse_json "$_" | ConvertToPrettyJson
    Write-Progress -Activity "Formatting JSON in application manifests" -status "Formatting $_" -percentComplete ($c / $manifests.count * 100)
    [System.IO.File]::WriteAllLines("$_", $json)
    git commit -q -m "Automatically formated JSON in $name's manifest"
    $c++
}


# Commit and tagging

Set-Location ..

if (!$NoTag) {
	$smajor = Get-Content versdat/major.txt
	$sminor = Get-Content versdat/minor.txt
	$sbuild = Get-Content versdat/build.txt
	$major = [int]$smajor
	$minor = [int]$sminor
	$build = [int]$sbuild
	
	if ($build -gt 255 -and $minor -lt 255) {
		$minor++
		$build = 0
	}
	elseif ($build -gt 255 -and $minor -gt 255) {
		$build = 0
		$minor = 0
		$major++
	}
	else {
		$build++
	}
	
	$smajor = [string]$major
	$sminor = [string]$minor
	$sbuild = [string]$build
	
	Set-Content -Path versdat/major.txt -Value $smajor
	Set-Content -Path versdat/minor.txt -Value $sminor
	Set-Content -Path versdat/build.txt -Value $sbuild

	git commit -a -m "Automatically bumped version number in the versdat directory"

	Write-Output "Creating GitHub release ${smajor}.${sminor}.${sbuild}"
	$version = "${smajor}.${sminor}.${sbuild}"
	$latestcommit = git rev-parse HEAD
	git tag -a -m "Automatically_added_tag_$version" "v$version" $latestcommit 
}

Write-Output "`a"
Remove-Item bin/log.txt