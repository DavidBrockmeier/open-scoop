{"homepage":"https://github.com/yuk7/ArchWSL/","description":"Install ArchLinux as a WSL Instance","notes":"Even when you are logging in as \u0027root\u0027, some operations (like service command) require Windows administrator privileges","version":"19010200","url":"https://github.com/yuk7/ArchWSL/releases/download/19010200/Arch.zip","hash":"29f0152a50f3a8cc2a864450ae68b83c0168c1d48b4169369fcc4afea4c1fbf8","checkver":{"url":"https://api.github.com/repos/yuk7/ArchWSL/releases/latest","jp":"$.tag_name"},"autoupdate":{"url":"https://github.com/yuk7/ArchWSL/releases/download/$version/Arch.zip"},"bin":"Arch.exe","shortcuts":[["Arch.exe","Arch Linux"]],"##":"\u0027rootfs\u0027 must be a \u0027real\u0027 directory (at least on Windows 10 RS4)","persist":"data","post_install":["$installable = $true","$user = [Security.Principal.WindowsIdentity]::GetCurrent() -as [Security.Principal.WindowsPrincipal]","$permission = Get-Acl $dir | select -ExpandProperty Access | where {","    ($user.IsInRole($_.IdentityReference)) -and `","    ($_.FileSystemRights.ToString() -eq \u0027FullControl\u0027) -and `","    # 3 = ([Security.AccessControl.InheritanceFlags]::ContainerInherit -bor ObjectInherit)","    ($_.InheritanceFlags -band 3) -and `","    ($_.PropagationFlags.ToString() -ne \u0027NoPropagateInherit\u0027)","}","if ($null -eq $permission) {","   warn \"Full Control access to the scoop directory is necessary to install WSL distribution.\"","   warn \"Change directory security and reinstall ArchWSL.\"","   $installable = $false","}","if ($null -eq (Get-Command wslconfig -ErrorAction SilentlyContinue)) {","    warn \"WSL appears not to be enabled!\"","    warn \"Run \u0027Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\u0027\"","    warn \"from an elevated PowerShell. Restart your computer when prompted and reinstall ArchWSL.\"","    $installable = $false","}","if ($installable) {","    \"`$si = New-Object System.Diagnostics.ProcessStartInfo \u0027$dir\\Arch.exe\u0027 -Property @{ UseShellExecute = `$false; RedirectStandardInput = `$true }","    `$p = [System.Diagnostics.Process]::Start(`$si)","    `$p.StandardInput.Write(\u0027y\u0027)","    `$p.WaitForExit()","    `$lx_uid = \u0026 \u0027$dir\\Arch.exe\u0027 get --lxuid","    if(!`$lx_uid) { error \u0027ArchWsl is not installed!\u0027; return }","    Set-ItemProperty -Path (\u0027HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\\\u0027 + `$lx_uid) -Name BasePath -Value \u0027$persist_dir\\data\u0027","    if (Test-Path (\u0027$persist_dir\u0027 + \u0027\\data\\rootfs\u0027)) {","        Remove-Item -Recurse -Path \u0027$dir\\rootfs\u0027","    } else {","        Move-Item -Path \u0027$dir\\rootfs\u0027 -Destination \u0027$persist_dir\\data\\rootfs\u0027","    }","    Remove-Item -Recurse -Path \u0027$dir\\temp\u0027","    \" | Set-Content \"$dir\\install.ps1\"","    \u0026 \"$dir\\install.ps1\"","}"],"uninstaller":{"script":["$lx_uid = \u0026 \"$dir\\Arch.exe\" get --lxuid","if(!$lx_uid) { error \u0027ArchWsl is not registered!\u0027; return }","Set-ItemProperty -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\\$lx_uid\" -Name BasePath -Value $dir","New-Item -ItemType Directory -Path \"$dir\\rootfs\" | Out-Null","\u0027y\u0027 | \u0026 \"$dir\\Arch.exe\" clean"]}}
